<?xml version="1.0" encoding="UTF-8"?>
<class name="Crab" extends="Actor" extends-java="Actor" enable="true" strideversion="1">
    <javadoc xml:space="preserve">This class defines a crab. Crabs live on the beach. They like sand worms (very yummy, especially the green ones).</javadoc>
    <imports>
        <import target="java.util.*" enable="true"/>
        <import target="greenfoot.*" enable="true"/>
        <import target="java.awt.Color" enable="true"/>
        <import target="java.util.List" enable="true"/>
        <import target="java.util.Set" enable="true"/>
    </imports>
    <implements>
        <implementstype type="LifeSubject" type-java="LifeSubject"/>
    </implements>
    <fields>
        <comment xml:space="preserve">WARNING: This file is auto-generated and any changes to it will be overwritten</comment>
        <variable access="private" type="int" type-java="int" name="wormsEaten" enable="true"/>
        <variable access="private" type="int" type-java="int" name="remainingLives" enable="true"/>
        <comment xml:space="preserve">John Ran</comment>
        <variable access="private" type="ArrayList&lt;LifeObserver&gt;" type-java="ArrayList&lt;LifeObserver&gt;" name="observers" value="new ArrayList &lt; LifeObserver &gt; ( )" value-java="new ArrayList &lt; LifeObserver &gt; ( )" enable="true"/>
    </fields>
    <constructors>
        <comment xml:space="preserve">John Ran</comment>
        <constructor access="public" enable="true">
            <javadoc xml:space="preserve">Initialise the crab</javadoc>
            <params/>
            <throws/>
            <body>
                <assign dest="wormsEaten" dest-java="wormsEaten" src="0" src-java="0" enable="true"/>
                <assign dest="remainingLives" dest-java="remainingLives" src="3" src-java="3" enable="true"/>
            </body>
        </constructor>
    </constructors>
    <methods>
        <method access="public" type="void" type-java="void" name="act" enable="true">
            <javadoc xml:space="preserve">Act - do whatever the crab wants to do. This method is called whenever the 'Act' or 'Run' button gets pressed in the environment.</javadoc>
            <params/>
            <throws/>
            <body>
                <call expression="checkKeyPress ( )" expression-java="checkKeyPress ( )" enable="true"/>
                <call expression="lookForWorm ( )" expression-java="lookForWorm ( )" enable="true"/>
            </body>
        </method>
        <method access="public" type="void" type-java="void" name="checkKeyPress" enable="true">
            <javadoc xml:space="preserve">Check whether a control key on the keyboard has been pressed. If it has, react accordingly.</javadoc>
            <params/>
            <throws/>
            <body>
                <if condition="Greenfoot . isKeyDown ( &quot;up&quot; )" condition-java="Greenfoot . isKeyDown ( &quot;up&quot; )" enable="true">
                    <ifStatements>
                        <call expression="turn ( - 25 )" expression-java="turn ( - 25 )" enable="true"/>
                    </ifStatements>
                </if>
                <if condition="Greenfoot . isKeyDown ( &quot;down&quot; )" condition-java="Greenfoot . isKeyDown ( &quot;down&quot; )" enable="true">
                    <ifStatements>
                        <call expression="turn ( 25 )" expression-java="turn ( 25 )" enable="true"/>
                    </ifStatements>
                </if>
                <if condition="Greenfoot . isKeyDown ( &quot;right&quot; )" condition-java="Greenfoot . isKeyDown ( &quot;right&quot; )" enable="true">
                    <ifStatements>
                        <call expression="move ( 3 )" expression-java="move ( 3 )" enable="true"/>
                    </ifStatements>
                </if>
                <if condition="Greenfoot . isKeyDown ( &quot;left&quot; )" condition-java="Greenfoot . isKeyDown ( &quot;left&quot; )" enable="true">
                    <ifStatements>
                        <call expression="move ( - 3 )" expression-java="move ( - 3 )" enable="true"/>
                    </ifStatements>
                </if>
            </body>
        </method>
        <method access="public" type="void" type-java="void" name="lookForWorm" enable="true">
            <javadoc xml:space="preserve">Check whether we have stumbled upon a worm. If we have, eat it. If not, do nothing. If we have eaten eight worms, we win.</javadoc>
            <params/>
            <throws/>
            <body>
                <if condition="isTouching ( Worm . class )" condition-java="isTouching ( Worm . class )" enable="true">
                    <ifStatements>
                        <call expression="removeTouching ( Worm . class )" expression-java="removeTouching ( Worm . class )" enable="true"/>
                        <assign dest="wormsEaten" dest-java="wormsEaten" src="wormsEaten + 1" src-java="wormsEaten + 1" enable="true"/>
                        <comment xml:space="preserve">getWorld().showText("Worms: " + wormsEaten, 100, 30);</comment>
                        <call expression="getWorld ( ) . showText ( &quot;Worms: &quot; + wormsEaten , 160 , 20 )" expression-java="getWorld ( ) . showText ( &quot;Worms: &quot; + wormsEaten , 160 , 20 )" enable="true"/>
                        <comment xml:space="preserve">John Ran</comment>
                        <call expression="Greenfoot . playSound ( &quot;slurp.wav&quot; )" expression-java="Greenfoot . playSound ( &quot;slurp.wav&quot; )" enable="true"/>
                    </ifStatements>
                </if>
            </body>
        </method>
        <method access="public" type="void" type-java="void" name="loseLife" enable="true">
            <javadoc xml:space="preserve">Crab loses a life when touched by a Lobster Added by John Ran</javadoc>
            <params/>
            <throws/>
            <body>
                <assign dest="remainingLives" dest-java="remainingLives" src="remainingLives - 1" src-java="remainingLives - 1" enable="true"/>
                <call expression="getWorld ( ) . showText ( &quot;Lives: &quot; + remainingLives , 50 , 20 )" expression-java="getWorld ( ) . showText ( &quot;Lives: &quot; + remainingLives , 50 , 20 )" enable="true"/>
                <if condition="remainingLives != 0" condition-java="remainingLives != 0" enable="true">
                    <ifStatements>
                        <call expression="this . setLocation ( 265 , 192 )" expression-java="this . setLocation ( 265 , 192 )" enable="true"/>
                    </ifStatements>
                </if>
                <call expression="notifyObservers ( )" expression-java="notifyObservers ( )" enable="true"/>
            </body>
        </method>
        <method access="public" type="int" type-java="int" name="getLives" enable="true">
            <javadoc xml:space="preserve">Return the number of lives Crab has left. Added by John Ran</javadoc>
            <params/>
            <throws/>
            <body>
                <return value="remainingLives" value-java="remainingLives" enable="true"/>
            </body>
        </method>
        <method access="public" type="int" type-java="int" name="getNumWorms" enable="true">
            <javadoc xml:space="preserve">Return the number of Worms eaten by Crab. Added by John Ran</javadoc>
            <params/>
            <throws/>
            <body>
                <return value="wormsEaten" value-java="wormsEaten" enable="true"/>
            </body>
        </method>
        <method access="public" type="void" type-java="void" name="attach" enable="true">
            <javadoc xml:space="preserve">Attach an observer to the ArrayList John Ran added this here for Observer Pattern</javadoc>
            <params>
                <param type="LifeObserver" type-java="LifeObserver" name="obj"/>
            </params>
            <throws/>
            <body>
                <call expression="observers . add ( obj )" expression-java="observers . add ( obj )" enable="true"/>
            </body>
        </method>
        <method access="public" type="void" type-java="void" name="detach" enable="true">
            <javadoc xml:space="preserve">Detach an observer from the ArrayList John Ran added this here for Observer Pattern</javadoc>
            <params>
                <param type="LifeObserver" type-java="LifeObserver" name="obj"/>
            </params>
            <throws/>
            <body>
                <call expression="observers . remove ( obj )" expression-java="observers . remove ( obj )" enable="true"/>
            </body>
        </method>
        <method access="public" type="void" type-java="void" name="notifyObservers" enable="true">
            <javadoc xml:space="preserve">Notify all observers of change in number of lives John Ran added this here for Observer Pattern</javadoc>
            <params/>
            <throws/>
            <body>
                <foreach type="LifeObserver" type-java="LifeObserver" var="obj" collection="observers" collection-java="observers" enable="true">
                    <call expression="obj . update ( )" expression-java="obj . update ( )" enable="true"/>
                </foreach>
            </body>
        </method>
    </methods>
</class>
