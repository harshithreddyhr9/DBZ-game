<?xml version="1.0" encoding="UTF-8"?>
<class name="Lobster" extends="Actor" extends-java="Actor" enable="true" strideversion="1">
    <javadoc xml:space="preserve">A lobster. Lobsters live on the beach. They like to eat crabs. (Well, in our game they do...) Version: 2 The lobster walks around randomly. If it runs into a crab it eats it. In this version, we have added a sound effect, and the game stops when a lobster eats the crab.</javadoc>
    <imports>
        <import target="java.util.*" enable="true"/>
        <import target="greenfoot.*" enable="true"/>
        <import target="java.awt.Color" enable="true"/>
    </imports>
    <implements>
        <implementstype type="LifeObserver" type-java="LifeObserver"/>
    </implements>
    <fields>
        <comment xml:space="preserve">WARNING: This file is auto-generated and any changes to it will be overwritten</comment>
        <variable access="private" type="CrabWorld" type-java="CrabWorld" name="world" enable="true"/>
        <comment xml:space="preserve">John Ran</comment>
        <variable access="private" type="int" type-java="int" name="posX" enable="true"/>
        <variable access="private" type="int" type-java="int" name="posY" enable="true"/>
    </fields>
    <constructors>
        <comment xml:space="preserve">John Ran added parameters</comment>
        <constructor access="public" enable="true">
            <javadoc xml:space="preserve">Initialize the Lobster, John Ran</javadoc>
            <params>
                <param type="int" type-java="int" name="x"/>
                <param type="int" type-java="int" name="y"/>
            </params>
            <throws/>
            <body>
                <assign dest="this . world" dest-java="this . world" src="( CrabWorld ) getWorld ( )" src-java="( CrabWorld ) getWorld ( )" enable="true"/>
                <assign dest="posX" dest-java="posX" src="x" src-java="x" enable="true"/>
                <assign dest="posY" dest-java="posY" src="y" src-java="y" enable="true"/>
            </body>
        </constructor>
    </constructors>
    <methods>
        <method access="public" type="void" type-java="void" name="act" enable="true">
            <javadoc xml:space="preserve">Do whatever lobsters do.</javadoc>
            <params/>
            <throws/>
            <body>
                <call expression="move ( 5 )" expression-java="move ( 5 )" enable="true"/>
                <call expression="turnAtEdge ( )" expression-java="turnAtEdge ( )" enable="true"/>
                <call expression="randomTurn ( )" expression-java="randomTurn ( )" enable="true"/>
                <call expression="lookForCrab ( )" expression-java="lookForCrab ( )" enable="true"/>
            </body>
        </method>
        <method access="public" type="void" type-java="void" name="turnAtEdge" enable="true">
            <javadoc xml:space="preserve">Check whether we are at the edge of the world. If we are, turn a bit. If not, do nothing.</javadoc>
            <params/>
            <throws/>
            <body>
                <if condition="isAtEdge ( )" condition-java="isAtEdge ( )" enable="true">
                    <ifStatements>
                        <call expression="turn ( 17 )" expression-java="turn ( 17 )" enable="true"/>
                    </ifStatements>
                </if>
            </body>
        </method>
        <method access="public" type="void" type-java="void" name="randomTurn" enable="true">
            <javadoc xml:space="preserve">Randomly decide to turn from the current direction, or not. If we turn turn a bit left or right by a random degree.</javadoc>
            <params/>
            <throws/>
            <body>
                <if condition="Greenfoot . getRandomNumber ( 100 ) &gt; 90" condition-java="Greenfoot . getRandomNumber ( 100 ) &gt; 90" enable="true">
                    <ifStatements>
                        <call expression="turn ( Greenfoot . getRandomNumber ( 90 ) - 45 )" expression-java="turn ( Greenfoot . getRandomNumber ( 90 ) - 45 )" enable="true"/>
                    </ifStatements>
                </if>
            </body>
        </method>
        <method access="public" type="void" type-java="void" name="lookForCrab" enable="true">
            <javadoc xml:space="preserve">Try to pinch a crab. That is: check whether we have stumbled upon a crab. If we have, remove the crab from the game, and stop the program running.</javadoc>
            <params/>
            <throws/>
            <body>
                <if condition="isTouching ( Crab . class )" condition-java="isTouching ( Crab . class )" enable="true">
                    <ifStatements>
                        <comment xml:space="preserve">removeTouching(Crab.class);</comment>
                        <variable type="Crab" type-java="Crab" name="crab" value="getWorld ( ) . getObjects ( Crab . class ) . get ( 0 )" value-java="getWorld ( ) . getObjects ( Crab . class ) . get ( 0 )" enable="true"/>
                        <comment xml:space="preserve">John Ran</comment>
                        <call expression="Greenfoot . playSound ( &quot;au.wav&quot; )" expression-java="Greenfoot . playSound ( &quot;au.wav&quot; )" enable="true"/>
                        <call expression="crab . loseLife ( )" expression-java="crab . loseLife ( )" enable="true"/>
                        <comment xml:space="preserve">John Ran</comment>
                        <if condition="crab . getLives ( ) == 0" condition-java="crab . getLives ( ) == 0" enable="true">
                            <ifStatements>
                                <call expression="removeTouching ( Crab . class )" expression-java="removeTouching ( Crab . class )" enable="true"/>
                                <comment xml:space="preserve">John Ran</comment>
                                <call expression="Greenfoot . stop ( )" expression-java="Greenfoot . stop ( )" enable="true"/>
                            </ifStatements>
                        </if>
                    </ifStatements>
                </if>
            </body>
        </method>
        <method access="public" type="void" type-java="void" name="update" enable="true">
            <javadoc xml:space="preserve">Update the observer's state when the subject state changes. John Ran added this here for Observer Pattern</javadoc>
            <params/>
            <throws/>
            <body>
                <variable type="Crab" type-java="Crab" name="crab" value="getWorld ( ) . getObjects ( Crab . class ) . get ( 0 )" value-java="getWorld ( ) . getObjects ( Crab . class ) . get ( 0 )" enable="true"/>
                <comment xml:space="preserve">John Ran</comment>
                <if condition="crab . getLives ( ) != 0" condition-java="crab . getLives ( ) != 0" enable="true">
                    <ifStatements>
                        <call expression="this . setLocation ( posX , posY )" expression-java="this . setLocation ( posX , posY )" enable="true"/>
                    </ifStatements>
                </if>
            </body>
        </method>
    </methods>
</class>
